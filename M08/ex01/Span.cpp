//               ################                                                         
//             ####################                                                       
//           ########################                                                     
//          #############+########### #                                                   
//          ######-..        .+########   < Span.cpp >                                    
//          ####-..            ..+####                                                    
//          ###-...             .-####                                                    
//          ###...              ..+##      Student: oussama <oezzaou@student.1337.ma>     
//           #-.++###.      -###+..##                                                     
//           #....  ...   .-.  ....##         Created: 2023/12/07 19:45:52 by oezzaou     
//        --.#.-#+## -..  -+ ##-#-.-...       Updated: 2023/12/07 19:55:21 by oezzaou     
//         ---....... ..  ........... -                                                   
//         -+#..     ..   .       .+-.                                                    
//          .--.     .     .     ..+.                                                     
//            -..    .+--.-.     ...                                                      
//            +.... .-+#.#+.    ..-                                                       
//             +...#####-++###-..-                                                        
//             #---..----+--.---+##                                                       
//           ###-+--.... ....--+#####                                                     
//     ##########--#-.......-#-###########        Made By Oussama Ezzaou <OEZZAOU> :)     

# include "Span.hpp"

//====< constructor >===========================================================
Span::Span(void)
{
	v = new std::vector<int>;
}

//====< constructor >===========================================================
Span::Span(unsigned int N) : N(N)
{
	v = new std::vector<int>(N);
}

//====< copy constructor >======================================================
Span::Span(const Span & span)
{
	v = new std::vector<int>(span.N);
	*this = span;
}

//====< destructor >============================================================
Span::~Span(void)
{
	delete v;
}

//====< operator= >=============================================================
Span &	Span::operator=(const Span & span)
{
	for (unsigned int i = 0; i < N && i < span.N; i++)
		i += 0;
	return (*this);
}

//====< addNumber >=============================================================
void	addNumber(int nbr)
{
	v->push_back(nbr);
}

//====< shortestSpan >==========================================================


//====< longestSpan >===========================================================
